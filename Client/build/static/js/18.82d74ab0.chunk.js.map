{"version":3,"sources":["redux/actions/msgs.js","pages/Chat.js"],"names":["addMsg","dispatch","payload","a","fetch","method","headers","body","JSON","stringify","type","ADD_MESSAGE","console","log","message","Messages","name","useSelector","state","auth","user","msgs","slice","reverse","useDispatch","useState","msg","setMsg","useEffect","response","json","GET_MSGS","fetchMsgs","className","map","index","key","time","substring","onClick","Date","toISOString","now","xmlns","viewBox","d","placeholder","onChange","e","target","value"],"mappings":"uNAGaA,EAAM,uCAAG,WAAOC,EAAUC,GAAjB,SAAAC,EAAA,+EAESC,MAAM,iCAAkC,CAC3DC,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BC,KAAMC,KAAKC,UAAUP,KALX,cAQdD,EAAS,CAAES,KAAMC,IAAaT,YARhB,gDAWdU,QAAQC,IAAI,KAAMC,SAXJ,yDAAH,wDCkFJC,UA7Ef,WAQI,IAAMC,EAAOC,aAAY,SAAAC,GAAK,OAAIA,EAAMC,KAAKC,KAAKJ,QAC5CK,EAAOJ,aAAY,SAAAC,GAAK,OAAIA,EAAMG,QAAMC,MAAM,EAAG,KAAKC,UAEtDtB,EAAWuB,cAXD,EAYMC,mBAAS,IAZf,mBAYTC,EAZS,KAYJC,EAZI,KA2BhB,OAbAC,qBAAU,YACS,uCAAG,8BAAAzB,EAAA,+EAEaC,MAAM,kCAFnB,cAEJyB,EAFI,gBAGYA,EAASC,OAHrB,OAGJ5B,EAHI,OAIVD,EAAS,CAAES,KAAMqB,IAAU7B,YAJjB,kDAMVU,QAAQC,IAAI,KAAMC,SAClBb,EAAS,CAAES,KAAMqB,IAAU7B,QAAS,KAP1B,0DAAH,qDAUf8B,KACD,IAEC,yBAAKC,UAAU,uHACX,yBAAKA,UAAU,gFACX,yBAAKA,UAAU,kBACX,wBAAIA,UAAU,4DAAd,cAIR,yBAAKA,UAAU,wCACVZ,EAAKa,KAAI,SAACR,EAAKS,GAAN,OACN,yBAAKF,UAAW,yCAAoCP,EAAIV,OAASA,GAAQ,eACrEoB,IAAKD,GACL,yBAAKF,UAAU,iCACX,yBAAKA,UAAU,0BACX,6BACI,0BAAMA,UAAU,kBAAkBP,EAAIV,MACtC,0BAAMiB,UAAU,2EAAwF,OAAbP,EAAIW,MACvFX,EAAIW,KAAKC,UAAU,EAAG,IAAM,IAAMZ,EAAIW,KAAKC,UAAU,GAAI,MAIrE,yBAAKL,UAAU,aACX,uBAAGA,UAAW,+DAA0DP,EAAIV,OAASA,GAAQ,iBACxFU,EAAIA,aAQjC,yBAAKO,UAAU,sCACX,yBAAKA,UAAU,yCACX,4BACIM,QAAS,kBAAMvC,EAAOC,EAAU,CAAEe,OAAMU,MAAKW,MAAM,IAAIG,MAAOC,YAAYD,KAAKE,UAC/ET,UAAU,iDACV,yBAAKA,UAAU,6BAA6BU,MAAM,6BAA6BC,QAAQ,aACnF,0BACIC,EAAE,4NAGd,2BAAOnC,KAAK,OAAOuB,UAAU,cAAca,YAAY,qBACnDC,SAAU,SAAAC,GAAC,OAAIrB,EAAOqB,EAAEC,OAAOC","file":"static/js/18.82d74ab0.chunk.js","sourcesContent":["import { ADD_MESSAGE, GET_MSGS } from './types'\n\n\nexport const addMsg = async (dispatch, payload) => {\n    try {\n        const response = await fetch(\"http://localhost:5000/messages\", {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify(payload)\n        })\n\n        dispatch({ type: ADD_MESSAGE, payload });\n\n    } catch (error) {\n        console.log(error.message);\n    }\n}\n\n\n\n","import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux'\nimport { addMsg } from '../redux/actions/msgs'\nimport { GET_MSGS } from '../redux/actions/types'\n\n// make a copy of the data, for the second table\n\n\nfunction Messages() {\n    /**\n     * DISCLAIMER: This code could be badly improved, but for the sake of the example\n     * and readability, all the logic for both table are here.\n     * You would be better served by dividing each table in its own\n     * component, like Table(?) and TableWithActions(?) hiding the\n     * presentation details away from the page view.\n     */\n    const name = useSelector(state => state.auth.user.name);\n    const msgs = useSelector(state => state.msgs).slice(0, 100).reverse();\n\n    const dispatch = useDispatch();\n    const [msg, setMsg] = useState(\"\");\n\n    useEffect(() => {\n        const fetchMsgs = async () => {\n            try {\n                const response = await fetch(\"http://localhost:5000/messages\");\n                const payload = await response.json();\n                dispatch({ type: GET_MSGS, payload });\n            } catch (error) {\n                console.log(error.message)\n                dispatch({ type: GET_MSGS, payload: [] });\n            }\n        }\n        fetchMsgs();\n    }, []);\n    return (\n        <div className=\"flex flex-1 h-screen-2 font-sans antialiased flex-col bg-gray-200 font-semibold dark:bg-gray-700 dark:text-gray-400\">\n            <div className=\"border-b flex px-6 py-2 items-center flex-none bg-green-200 dark:bg-gray-700\">\n                <div className=\"flex flex-col \">\n                    <h3 className=\"text-grey-darkest mb-1 font-extrabold font-Noto text-2xl\">ChatRoom</h3>\n                </div>\n            </div>\n\n            <div className=\"overflow-y-auto font-Noto h-screen-2\" >\n                {msgs.map((msg, index) => (\n                    <div className={\"px-6 py-4 flex-1 flex mx-10 \" + `${msg.name === name && 'justify-end'}`}\n                        key={index}>\n                        <div className=\"flex items-start mb-4 text-sm\">\n                            <div className=\"flex-1 overflow-hidden\">\n                                <div>\n                                    <span className=\"pr-5 font-bold\">{msg.name}</span>\n                                    <span className=\"bg-purple-200 py-1 px-2 dark:text-gray-800 rounded-lg text-grey text-xs\">{msg.time !== null\n                                        && (msg.time.substring(5, 10) + ' ' + msg.time.substring(11, 19))}\n                                    </span>\n                                </div>\n\n                                <div className=\"p-2 flex \" >\n                                    <p className={'p-4 rounded-lg text-black leading-normal bg-white ' + `${msg.name === name && 'bg-green-200'}`}>\n                                        {msg.msg}\n                                    </p>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n            <div className=\"pb-6 px-4 flex-none mt-4 font-Noto\">\n                <div className=\"flex rounded-lg border-2 border-grey \">\n                    <button\n                        onClick={() => addMsg(dispatch, { name, msg, time: new Date().toISOString(Date.now()) })}\n                        className=\"text-3xl text-grey border-r-2 border-grey p-2\">\n                        <svg className=\"fill-current h-6 w-6 block\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 20 20\">\n                            <path\n                                d=\"M16 10c0 .553-.048 1-.601 1H11v4.399c0 .552-.447.601-1 .601-.553 0-1-.049-1-.601V11H4.601C4.049 11 4 10.553 4 10c0-.553.049-1 .601-1H9V4.601C9 4.048 9.447 4 10 4c.553 0 1 .048 1 .601V9h4.399c.553 0 .601.447.601 1z\" />\n                        </svg>\n                    </button>\n                    <input type=\"text\" className=\"w-full px-4\" placeholder=\"Add a new message!\"\n                        onChange={e => setMsg(e.target.value)}\n                    />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Messages\n"],"sourceRoot":""}