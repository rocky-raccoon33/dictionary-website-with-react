{"version":3,"sources":["components/WeChat.js","assets/img/infoCard.jpg","assets/img/create-account-office.jpeg","assets/img/create-account-office-dark.jpeg","pages/CreateAccount.js"],"names":["WeChat","useState","isModalOpen","setIsModalOpen","className","block","layout","onClick","aria-hidden","backdrop","isOpen","onClose","alt","src","infoCard","module","exports","Login","name","setName","password","setPassword","confirm","setConfirm","dispatch","useDispatch","agree","setAgree","msg","setMsg","valid","setValid","used","useSelector","state","users","map","user","includes","delay","ms","Promise","resolve","setTimeout","register","e","a","type","REGISTER_SUCCESS","payload","fetch","method","headers","body","JSON","stringify","console","error","message","preventDefault","ImageLight","ImageDark","onChange","target","value","hidden","check","tag","Link","to","href"],"mappings":"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","file":"static/js/11.55219608.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport infoCard from '../assets/img/infoCard.jpg'\nimport { WeixinIcon } from '../icons'\nimport { Modal, ModalBody, Button } from '@windmill/react-ui'\n\nfunction WeChat() {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n\n  function openModal() {\n    setIsModalOpen(true)\n  }\n\n  function closeModal() {\n    setIsModalOpen(false)\n  }\n\n  return (\n    <>\n      <Button className=\"mt-4\" block layout=\"outline\" onClick={() => openModal()}>\n        <WeixinIcon className=\"w-4 h-4 mr-2\" aria-hidden=\"true\" />\n            Wechat\n        </Button>\n      <Modal backdrop='static' isOpen={isModalOpen} onClose={closeModal}>\n        <ModalBody>\n          <div className=\"w-100\">\n            <img alt=\"panda\" className=\" size w-full h-full\" src={infoCard} />\n          </div>\n        </ModalBody>\n      </Modal>\n    </>\n  )\n}\n\nexport default WeChat\n","module.exports = __webpack_public_path__ + \"static/media/infoCard.81a84b15.jpg\";","module.exports = __webpack_public_path__ + \"static/media/create-account-office.41b2c6a1.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/create-account-office-dark.d34c7b50.jpeg\";","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { REGISTER_SUCCESS } from '../redux/actions/types'\nimport ImageLight from '../assets/img/create-account-office.jpeg'\nimport ImageDark from '../assets/img/create-account-office-dark.jpeg'\nimport { GithubIcon } from '../icons'\nimport { Input, Label, Button, HelperText } from '@windmill/react-ui'\nimport WeChat from '../components/WeChat'\n\nfunction Login() {\n\n  const [name, setName] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [confirm, setConfirm] = useState(\"\");\n  const dispatch = useDispatch();\n  const [agree, setAgree] = useState(false);\n  const [msg, setMsg] = useState(\"\");\n  const [valid, setValid] = useState(true);\n  const used = useSelector(state => state.users).map(user => user.name).includes(name);\n\n  const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n\n\n  const register = async e => {\n    if (!used && name !== '' && password !== '' && password === confirm && agree) {\n      dispatch({ type: REGISTER_SUCCESS, payload: { name, password } });\n      try {\n        const response = await fetch(\"http://localhost:5000/users\", {\n          method: \"POST\",\n          headers: {\n            \"Content-Type\": \"application/json\",\n          },\n          body: JSON.stringify({ name, password })\n        })\n        await delay(1000)\n        dispatch({ type: REGISTER_SUCCESS, payload: { name, password } });\n      } catch (error) {\n        console.error(error.message)\n      }\n    } else {\n      e.preventDefault();\n      setValid(false);\n      if (name === '') {\n        setMsg(\"The user name can not be empty.\")\n      } else if (used) {\n        setMsg(\"User name has already been userd.\")\n      }\n      else if (password === '') {\n        setMsg('The password cannot be empty.')\n\n      } else if (password !== confirm) {\n        setMsg(\"The passwords do not match.\")\n      } else if (!agree) {\n        setMsg(\"You must agree with the privacy policy.\")\n      }\n    }\n\n\n\n\n  }\n\n  return (\n    <div className=\"flex items-center min-h-screen p-6 bg-gray-50 dark:bg-gray-900\">\n      <div className=\"flex-1 h-full max-w-4xl mx-auto overflow-hidden bg-white rounded-lg shadow-xl dark:bg-gray-800\">\n        <div className=\"flex flex-col overflow-y-auto md:flex-row\">\n          <div className=\"h-32 md:h-auto md:w-1/2\">\n            <img\n              aria-hidden=\"true\"\n              className=\"object-cover w-full h-full dark:hidden\"\n              src={ImageLight}\n              alt=\"Office\"\n            />\n            <img\n              aria-hidden=\"true\"\n              className=\"hidden object-cover w-full h-full dark:block\"\n              src={ImageDark}\n              alt=\"Office\"\n            />\n          </div>\n          <main className=\"flex items-center justify-center p-6 sm:p-12 md:w-1/2\">\n            <div className=\"w-full\">\n              <h1 className=\"mb-4 text-xl font-semibold text-gray-700 dark:text-gray-200\">\n                <button>\n                  Create account\n                     </button>\n              </h1>\n              <Label>\n                <span>Name</span>\n                <Input className=\"mt-1\" type=\"Name\"\n                  onChange={e => setName(e.target.value)}\n                />\n              </Label>\n              <Label className=\"mt-4\">\n                <span>Password</span>\n                <Input className=\"mt-1\" type=\"password\"\n                  onChange={e => setPassword(e.target.value)} />\n              </Label>\n              <Label className=\"mt-4\">\n                <span >Confirm password</span>\n                <Input className=\"mt-1\" type=\"password\"\n                  onChange={e => setConfirm(e.target.value)} />\n              </Label>\n              <div>\n                <HelperText valid={valid} hidden={valid}>{msg}</HelperText>\n                <HelperText valid={valid} hidden={!valid}>\"Everything seems ok.\"</HelperText>\n              </div>\n\n              <Label className=\"mt-6\" check>\n                <Input type=\"checkbox\" onChange={() => setAgree(!agree)} />\n                <span className=\"ml-2\">\n                  I agree to the <span className=\"underline\">privacy policy</span>\n                </span>\n              </Label>\n\n              <Button tag={Link} to='/' block className=\"mt-4\" onClick={e => register(e)}>\n                Create account\n              </Button>\n\n              <hr className=\"my-8\" />\n\n              <Button block layout=\"outline\">\n                <GithubIcon className=\"w-4 h-4 mr-2\" aria-hidden=\"true\" />\n                <a href=\"https://github.com/rocky-raccoon94\">Github</a>\n\n              </Button>\n\n              <WeChat />\n\n\n\n              <p className=\"mt-4\">\n                <Link\n                  className=\"text-sm font-medium text-purple-600 dark:text-purple-400 hover:underline\"\n                  to=\"/login\"\n                >\n                  Already have an account? Login\n                </Link>\n              </p>\n            </div>\n          </main>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Login\n"],"sourceRoot":""}