{"version":3,"sources":["components/Typography/PageTitle.js","components/CTA.js","components/Cards/InfoCard.js","components/Chart/ChartCard.js","components/Chart/ChartLegend.js","components/RoundIcon.js","data/Words.js","pages/Dashboard.js"],"names":["PageTitle","children","className","CTA","href","fill","viewBox","d","dangerouslySetInnerHTML","__html","InfoCard","title","value","icon","Chart","ChartLegend","legends","map","legend","key","color","RoundIcon","Icon","iconColorClass","bgColorClass","cls","classNames","Words","dispatch","useDispatch","deleteAWord","id","a","deleteWord","fetch","method","console","log","message","words","useSelector","state","wordlist","useState","pageTable","setPageTable","totalResults","length","dataTable","slice","useEffect","data","json","jsonData","fetchWords","fetchWord","word","i","name","definition","time","author","layout","onClick","size","aria-label","aria-hidden","resultsPerPage","onChange","p","label","Dashboard","groupBy","arr","criteria","reduce","obj","item","hasOwnProperty","user","auth","users","msgs","total","add","filter","res1","res2","lineOptions","labels","Object","keys","datasets","backgroundColor","borderColor","values","options","responsive","tooltips","mode","intersect","hover","scales","x","display","scaleLabel","labelString","y","doughnutOptions","splice","cutoutPercentage","doughnutLegends","tmp","push","PeopleIcon","MoneyIcon","FormsIcon","ChatIcon","ChartCard"],"mappings":"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","file":"static/js/16.f21f2499.chunk.js","sourcesContent":["import React from 'react'\n\nfunction PageTitle({ children }) {\n  return (\n    <h1 className=\"my-6 text-2xl font-semibold text-gray-700 dark:text-gray-200\">{children}</h1>\n  )\n}\n\nexport default PageTitle\n","import React from 'react'\n\nfunction CTA() {\n  return (\n    <a\n      className=\"flex items-center justify-between p-4 mb-8 text-sm font-semibold text-purple-100 bg-gray-600 rounded-lg shadow-md focus:outline-none focus:shadow-outline-purple\"\n      href=\"https://github.com/estevanmaito/windmill-dashboard-react\"\n    >\n      <div className=\"flex items-center\">\n        <svg className=\"w-5 h-5 mr-2\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n          <path d=\"M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z\"></path>\n        </svg>\n        <span>Star this project on GitHub</span>\n      </div>\n      <span>\n        Go <span dangerouslySetInnerHTML={{ __html: '&RightArrow;' }}></span>\n      </span>\n    </a>\n  )\n}\n\nexport default CTA\n","import React from 'react'\nimport { Card, CardBody } from '@windmill/react-ui'\n\nfunction InfoCard({ title, value, children: icon }) {\n  return (\n    <Card>\n      <CardBody className=\"flex items-center\">\n        {icon}\n        <div>\n          <p className=\"mb-2 text-sm font-medium text-gray-600 dark:text-gray-400\">{title}</p>\n          <p className=\"text-lg font-semibold text-gray-700 dark:text-gray-200\">{value}</p>\n        </div>\n      </CardBody>\n    </Card>\n  )\n}\n\nexport default InfoCard\n","import React from 'react'\n\nfunction Chart({ children, title }) {\n  return (\n    <div className=\"min-w-0 p-4 bg-white rounded-lg shadow-xs dark:bg-gray-800\">\n      <p className=\"mb-4 font-semibold text-gray-800 dark:text-gray-300\">{title}</p>\n      {children}\n    </div>\n  )\n}\n\nexport default Chart\n","import React from 'react'\n\nfunction ChartLegend({ legends }) {\n  return (\n    <div className=\"flex justify-center mt-4 space-x-3 text-sm text-gray-600 dark:text-gray-400\">\n      {legends.map((legend) => (\n        <div className=\"flex items-center\" key={legend.title}>\n          <span className={`inline-block w-3 h-3 mr-1 ${legend.color} rounded-full`}></span>\n          <span>{legend.title}</span>\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default ChartLegend\n","import React from 'react'\nimport classNames from 'classnames'\n\nfunction RoundIcon({\n  icon: Icon,\n  iconColorClass = 'text-purple-600 dark:text-purple-100',\n  bgColorClass = 'bg-purple-100 dark:bg-purple-600',\n  className,\n}) {\n  const baseStyle = 'p-3 rounded-full'\n\n  const cls = classNames(baseStyle, iconColorClass, bgColorClass, className)\n  return (\n    <div className={cls}>\n      <Icon className=\"w-5 h-5\" />\n    </div>\n  )\n}\n\nexport default RoundIcon\n","import React, { useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux';\nimport { fetchWords, deleteWord } from '../redux/actions/wordlist'\n\nimport PageTitle from '../components/Typography/PageTitle'\nimport {\n    Table,\n    TableHeader,\n    TableCell,\n    TableBody,\n    TableRow,\n    TableFooter,\n    TableContainer,\n    Button,\n    Pagination,\n} from '@windmill/react-ui'\nimport { TrashIcon } from '../icons'\n\n// make a copy of the data, for the second table\n\nfunction Words() {\n    /**\n     * DISCLAIMER: This code could be badly improved, but for the sake of the example\n     * and readability, all the logic for both table are here.\n     * You would be better served by dividing each table in its own\n     * component, like Table(?) and TableWithActions(?) hiding the\n     * presentation details away from the page view.\n     */\n    const dispatch = useDispatch();\n\n    //delete a word\n    const deleteAWord = async (id) => {\n        try {\n            dispatch(deleteWord(id));\n            const response = await fetch(`http://localhost:5000/words/${id}`,\n                {\n                    method: \"DELETE\"\n                });\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n\n\n    const words = useSelector(state => state.wordlist);\n    // setup pages control for every table\n    const [pageTable, setPageTable] = useState(1)\n\n\n\n    // pagination setup\n    const resultsPerPage = 15\n    const totalResults = words.length\n\n    // setup data for every table\n    const dataTable = words.slice((pageTable - 1) * resultsPerPage, pageTable * resultsPerPage);\n\n\n    // pagination change control\n\n\n    // pagination change control\n    function onPageChangeTable(p) {\n        setPageTable(p)\n\n    }\n\n\n\n    // on page change, load new sliced data\n    // here you would make another server request for new data\n    useEffect(() => {\n        //fetch the data from postgres\n        const fetchWord = async () => {\n            try {\n                const data = await fetch(\"http://localhost:5000/words\");\n                const jsonData = await data.json();\n                dispatch(fetchWords(jsonData));\n            } catch (error) {\n                console.log(error.message);\n            }\n        }\n        fetchWord();\n    }, [])\n\n    return (\n        <>\n            <PageTitle><p className=\"\">词汇表</p></PageTitle>\n            <TableContainer className=\"mb-8\">\n                <Table >\n                    <TableHeader>\n                        <tr>\n                            <TableCell className=\"font-concert text-lg text-purple-600\" >word</TableCell>\n                            <TableCell className=\"font-concert text-lg text-purple-600\">Definition</TableCell>\n                            <TableCell className=\"font-concert text-lg text-purple-600\">Last Edited</TableCell>\n                            <TableCell className=\"font-concert text-lg text-purple-600\">Author</TableCell>\n                            <TableCell className=\"font-contrail text-sm\"></TableCell>\n                        </tr>\n                    </TableHeader>\n                    {dataTable.map((word, i) => (\n                        <TableBody key={word.id}>\n                            <TableRow key={i}>\n                                <TableCell>\n                                    <div className=\"flex items-center text-sm \">\n                                        <p className=\"font-bold text-center\">{word.name}</p>\n                                    </div>\n                                </TableCell>\n                                <TableCell>\n                                    <span className=\"font-semibold text-sm text-center\">{word.definition}</span>\n                                </TableCell>\n\n                                <TableCell>\n                                    <span className=\"text-sm bg-gray-400 font-Inconsolata p-2 font-semibold rounded-lg dark:text-black dark:bg-green-200\">{word.time}</span>\n                                </TableCell>\n                                <TableCell>\n                                    <span className=\"font-Inconsolata text-lg\">{word.author}</span>\n                                </TableCell>\n                                <TableCell>\n                                    <div className=\"flex items-center space-x-4\">\n                                        <Button layout=\"link\" onClick={() => deleteAWord(word.id)} size=\"icon\" aria-label=\"Delete\">\n                                            <TrashIcon className=\"w-5 h-5\" aria-hidden=\"true\" />\n                                        </Button>\n                                    </div>\n                                </TableCell>\n                            </TableRow>\n                        </TableBody>\n                    ))}\n                </Table>\n                <TableFooter>\n                    <Pagination\n                        totalResults={totalResults}\n                        resultsPerPage={resultsPerPage}\n                        onChange={onPageChangeTable}\n                        label=\"Table navigation\"\n                    />\n                </TableFooter>\n            </TableContainer>\n        </>\n    )\n}\n\nexport default Words;","import React from 'react'\nimport { useSelector } from 'react-redux'\n\nimport CTA from '../components/CTA'\nimport InfoCard from '../components/Cards/InfoCard'\nimport ChartCard from '../components/Chart/ChartCard'\nimport { Doughnut, Line } from 'react-chartjs-2'\nimport ChartLegend from '../components/Chart/ChartLegend'\nimport PageTitle from '../components/Typography/PageTitle'\nimport { ChatIcon, FormsIcon, MoneyIcon, PeopleIcon } from '../icons'\nimport RoundIcon from '../components/RoundIcon'\n\nimport Words from '../data/Words'\n\nfunction Dashboard() {\n  const groupBy = (arr, criteria) => {\n    return arr.reduce(function (obj, item) {\n\n      // Check if the criteria is a function to run on the item or a property of it\n      var key = typeof criteria === 'function' ? criteria(item) : item[criteria];\n\n      // If the key doesn't exist yet, create it\n      if (!obj.hasOwnProperty(key)) {\n        obj[key] = 0;\n      }\n      // Push the value to the object\n      obj[key]++;\n      // Return the object to the next item in the loop\n      return obj;\n    }, {});\n  };\n\n  let backgroundColor = ['#FC8181', '#F6AD55', '#F6E05E', '#68D391', '#4FD1C5',\n    '#63B3ED', '#7F9CF5', '#B794F4', '#F687B3'];\n  const color = ['bg-red-400', 'bg-orange-400', 'bg-yellow-400', 'bg-green-400', 'bg-teal-400',\n    'bg-blue-400', 'bg-indigo-400', 'bg-purple-400', 'bg-pink-400']\n\n  const lineLegends = [\n    { title: '新增单词', color: 'bg-teal-600' },]\n  const user = useSelector(state => state.auth.user);\n  const users = useSelector(state => state.users);\n  const msgs = useSelector(state => state.msgs)\n  const words = useSelector(state => state.wordlist);\n  const total = words.length;\n  const add = words.filter(word => word.author === user.name).length;\n\n  const res1 = groupBy(words, \"author\");\n  const res2 = groupBy(words, \"time\");\n  const lineOptions = {\n    data: {\n      labels: Object.keys(res2),\n      datasets: [\n        {\n          label: 'Added',\n          /**\n           * These colors come from Tailwind CSS palette\n           * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\n           */\n          backgroundColor: '#0694a2',\n          borderColor: '#0694a2',\n          data: Object.values(res2),\n          fill: false,\n        }\n\n      ],\n    },\n    options: {\n      responsive: true,\n      tooltips: {\n        mode: 'index',\n        intersect: false,\n      },\n      hover: {\n        mode: 'nearest',\n        intersect: true,\n      },\n      scales: {\n        x: {\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: 'Month',\n          },\n        },\n        y: {\n          display: true,\n          scaleLabel: {\n            display: true,\n            labelString: 'Value',\n          },\n        },\n      },\n    },\n    legend: {\n      display: false,\n    },\n  }\n\n\n  const doughnutOptions = {\n    data: {\n      datasets: [\n        {\n          data: users.map(user => res1[user.name]),\n          /**\n           * These colors come from Tailwind CSS palette\n           * https://tailwindcss.com/docs/customizing-colors/#default-color-palette\n           */\n          backgroundColor: backgroundColor.splice(0, users.length),\n          label: 'Dataset 1',\n        },\n      ],\n      labels: users.map(user => user.name),\n    },\n    options: {\n      responsive: true,\n      cutoutPercentage: 80,\n    },\n    legend: {\n      display: false,\n    },\n  }\n\n\n\n  const doughnutLegends = [];\n  for (let i = 0; i < users.length; i++) {\n    const tmp = { title: users[i].name, color: color[i] }\n    doughnutLegends.push(tmp);\n  }\n\n  return (\n    <div className=\"container px-6\">\n      <div className=\"mt-8\">\n        <CTA />\n      </div>\n      {/* <!-- Cards --> */}\n      <div className=\" grid gap-6 mb-8 md:grid-cols-2 xl:grid-cols-4\">\n        <InfoCard title=\"User group\" value={users.length}>\n          <RoundIcon\n            icon={PeopleIcon}\n            iconColorClass=\"text-orange-500 dark:text-orange-100\"\n            bgColorClass=\"bg-orange-100 dark:bg-orange-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n\n        <InfoCard title=\"Total words\" value={total}>\n          <RoundIcon\n            icon={MoneyIcon}\n            iconColorClass=\"text-green-500 dark:text-green-100\"\n            bgColorClass=\"bg-green-100 dark:bg-green-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n\n        <InfoCard title=\"You have added\" value={add}>\n          <RoundIcon\n            icon={FormsIcon}\n            iconColorClass=\"text-blue-500 dark:text-blue-100\"\n            bgColorClass=\"bg-blue-100 dark:bg-blue-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n\n        <InfoCard title=\"Msgs\" value={msgs.length}>\n          <RoundIcon\n            icon={ChatIcon}\n            iconColorClass=\"text-teal-500 dark:text-teal-100\"\n            bgColorClass=\"bg-teal-100 dark:bg-teal-500\"\n            className=\"mr-4\"\n          />\n        </InfoCard>\n      </div>\n\n      <Words />\n\n      <PageTitle className=\"font-semibold\">统计</PageTitle>\n      <div className=\"grid gap-6 mb-8 md:grid-cols-2\">\n        <ChartCard title=\"Doughnut\">\n          <Doughnut {...doughnutOptions} />\n          <ChartLegend legends={doughnutLegends} />\n        </ChartCard>\n\n        <ChartCard title=\"Line\">\n          <Line {...lineOptions} />\n          <ChartLegend legends={lineLegends} />\n        </ChartCard>\n      </div>\n    </div>\n  )\n}\n\nexport default Dashboard\n"],"sourceRoot":""}