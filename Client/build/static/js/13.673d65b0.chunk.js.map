{"version":3,"sources":["components/Modals.js","pages/Result.js"],"names":["Modals","word","put","useState","isModalOpen","setIsModalOpen","newWord","Object","assign","closeModal","className","onClick","icon","faEdit","color","backdrop","isOpen","onClose","onChange","e","name","target","value","valid","placeholder","defaultValue","definition","rows","detail","layout","block","size","Result","keyword","useParams","words","useSelector","state","wordlist","length","totalResults","setTotal","dispatch","useDispatch","render","rerender","pageTable","setPageTable","dataTable","setDataTable","update","a","fetch","id","method","headers","body","JSON","stringify","updateWord","console","log","message","deleteAWord","deleteWord","useEffect","tmp","filter","toUpperCase","includes","slice","map","index","key","resultsPerPage","p","label"],"mappings":"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","file":"static/js/13.673d65b0.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, Label, Input, HelperText, Textarea } from '@windmill/react-ui'\nimport { faEdit } from '@fortawesome/free-regular-svg-icons';\n\nfunction Modals({ word, put }) {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  let newWord = Object.assign({}, word);\n\n  function openModal() {\n    setIsModalOpen(true)\n  }\n\n  function closeModal() {\n    setIsModalOpen(false)\n  }\n\n  return (\n    <>\n      <div className=\"absolute bottom-0 p-3 right-0\">\n\n        <button className=\"font-bold\" onClick={openModal}><FontAwesomeIcon icon={faEdit} color=\"purple\" /></button>\n      </div>\n\n      <Modal backdrop='static' isOpen={isModalOpen} onClose={closeModal}>\n        <ModalHeader className=\"font-bold\">正在编辑...</ModalHeader>\n        <ModalBody>\n          <div className=\"px-4 py-3 mb-8 bg-cool-gray-100 rounded-lg shadow-md dark:bg-gray-800\">\n            <Label className=\"mt-4\">\n              <Input className=\"mt-1\" onChange={e => {\n                newWord.name = e.target.value;\n              }} valid={true} placeholder={word.name} defaultValue={word.name} />\n              <HelperText valid={true} className=\"font-bold p-2\">单词</HelperText>\n            </Label>\n\n            <Label className=\"mt-4\">\n              <Input className=\"mt-1\" onChange={e => {\n                newWord.definition = e.target.value;\n              }} valid={true} placeholder={word.name} defaultValue={word.definition} />\n              <HelperText valid={true} className=\"font-bold p-2\">中文</HelperText>\n            </Label>\n\n            <Label className=\"mt-4\">\n              <Textarea className=\"mt-1\" rows=\"6\" placeholder={word.name} defaultValue={word.detail}\n                onChange={e => {\n                  newWord.detail = e.target.value;\n                }} />\n\n            </Label>\n\n          </div>\n\n        </ModalBody>\n        <ModalFooter>\n          {/* I don't like this approach. Consider passing a prop to ModalFooter\n           * that if present, would duplicate the buttons in a way similar to this.\n           * Or, maybe find some way to pass something like size=\"large md:regular\"\n           * to Button\n           */}\n          <div className=\"hidden sm:block\">\n            <Button layout=\"outline\" onClick={closeModal}>\n              Cancel\n            </Button>\n          </div>\n          <div className=\"hidden sm:block\">\n            <Button onClick={() => {\n              put(newWord);\n              closeModal();\n            }\n            }>Put</Button>\n          </div>\n          <div className=\"block w-full sm:hidden\">\n            <Button block size=\"large\" layout=\"outline\" onClick={closeModal}>\n              Cancel\n            </Button>\n          </div>\n\n        </ModalFooter>\n      </Modal>\n    </>\n  )\n}\n\nexport default Modals\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateWord, deleteWord } from '../redux/actions/wordlist';\nimport { Card, CardBody, Button } from '@windmill/react-ui';\nimport { Pagination, Label, Input } from '@windmill/react-ui'\nimport Modals from '../components/Modals';\nimport { useParams } from 'react-router-dom'\n\n\n\nexport default function Result() {\n    let keyword = useParams().keyword;\n\n    let words = useSelector(state => state.wordlist)\n\n\n    // pagination setup\n    const resultsPerPage = 20\n    const [totalResults, setTotal] = useState(words.length);\n    const dispatch = useDispatch();\n    const [render, rerender] = useState(0);\n    // setup pages control for every table\n    const [pageTable, setPageTable] = useState(1)\n\n    // setup data for every table\n    const [dataTable, setDataTable] = useState([])\n\n    const update = async (word) => {\n        try {\n            const response = await fetch(`http://localhost:5000/words/${word.id}`,\n                {\n                    method: \"PUT\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify(word)\n                });\n\n            dispatch(updateWord(word));\n            rerender(render + 1);\n\n\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n\n    const deleteAWord = async (id) => {\n        try {\n            const response = await fetch(`http://localhost:5000/words/${id}`, {\n                method: 'DELETE'\n            });\n            dispatch(deleteWord(id));\n            rerender(render + 1);\n\n\n\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n    // pagination change control\n    function onPageChangeTable(p) {\n        setPageTable(p)\n    }\n\n    // on page change, load new sliced data\n    // here you would make another server request for new data\n    useEffect(() => {\n        let tmp = [];\n        if (keyword === \"You must've missed something\") tmp = words;\n        else tmp = words.filter\n            (word => word.name.toUpperCase().includes(keyword.toUpperCase())\n                || word.definition.includes(keyword));\n        setTotal(tmp.length);\n        setDataTable(tmp.slice((pageTable - 1) * resultsPerPage, pageTable * resultsPerPage));\n\n    }\n        , [pageTable, keyword, render, totalResults])\n\n    return (\n        <div className=\"container  px-6\">\n            <p className=\"text-purple-600 font-Inconsolata text-4xl font-semibold my-3 \">\n                <span className=\"bg-green-100 px-2 py-1 rounded-lg dark:bg-cool-gray-400\">\n                    Keyword: {keyword}</span></p>\n\n            <div className=\"container w-full  p-5\">\n                {\n                    dataTable.map((word, index) => (\n                        <Card key={index} className=\"mb-4 relative mr-4\">\n                            <CardBody>\n                                <p className=\"mb-4 font-bold text-gray-600 dark:text-gray-300\">{word.name}</p>\n                                <p className=\"text-gray-600 dark:text-gray-400 font-semibold mb-3\">\n                                    <span className=\"mr-2 font-semibold bg-purple-600 rounded text-white p-1\">中文释义</span>\n                                    {word.definition}\n                                </p>\n                                <p className=\"text-gray-600 dark:text-gray-400 pb-8 leading-7\">\n                                    {word.detail}\n                                </p>\n                                <div className=\"absolute top-0 right-0\">\n                                    <button className=\"bg-purple-600 p-2 text-white rounded text-sm font-concert\" onClick={() => deleteAWord(word.id)}>Delete</button>\n                                </div>\n                                <Modals word={word} put={update} />\n                            </CardBody>\n                        </Card>\n\n\n                    ))\n                }\n\n                <Pagination totalResults={totalResults}\n                    resultsPerPage={resultsPerPage}\n                    onChange={onPageChangeTable}\n                    label=\"Table navigation\"\n                />\n            </div>\n        </div>\n    )\n}\n"],"sourceRoot":""}