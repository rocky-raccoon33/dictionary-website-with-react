{"version":3,"sources":["pages/Events.js"],"names":["Tables","dispatch","useDispatch","useState","pageTable","setPageTable","events","useSelector","state","name","auth","user","add","setAdd","modify","setModify","totalResults","length","dataTable","slice","useEffect","a","fetch","response","json","payload","type","GET_EVENTS","console","log","message","fetchEvents","deleteEvent","DELETE_EVENT","method","error","addEvent","ADD_EVENT","headers","body","JSON","stringify","className","layout","onClick","time","Date","toISOString","now","onChange","e","target","value","map","event","i","key","id","size","aria-label","aria-hidden","hidden","resultsPerPage","p","label"],"mappings":"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","file":"static/js/21.b529ff66.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { ADD_EVENT, DELETE_EVENT, GET_EVENTS } from '../redux/actions/types'\n\nimport {\n  Table,\n  TableHeader,\n  TableCell,\n  TableBody,\n  TableRow,\n  TableFooter,\n  TableContainer,\n  Badge,\n  Button,\n  Pagination,\n  Input\n} from '@windmill/react-ui'\nimport { TrashIcon } from '../icons'\n\n// make a copy of the data, for the second table\n\nfunction Tables() {\n  /**\n   * DISCLAIMER: This code could be badly improved, but for the sake of the example\n   * and readability, all the logic for both table are here.\n   * You would be better served by dividing each table in its own\n   * component, like Table(?) and TableWithActions(?) hiding the\n   * presentation details away from the page view.\n   */\n\n\n  const dispatch = useDispatch();\n  // setup pages control for every table\n  const [pageTable, setPageTable] = useState(1)\n  const events = useSelector(state => state.events);\n  const name = useSelector(state => state.auth.user.name);\n  const [add, setAdd] = useState(0);\n  const [modify, setModify] = useState(0);\n\n  // pagination setup\n  const resultsPerPage = 10;\n  const totalResults = events.length;\n\n  // pagination change control\n  function onPageChangeTable(p) {\n    setPageTable(p)\n  }\n\n  let dataTable = events.slice((pageTable - 1) * resultsPerPage, pageTable * resultsPerPage);\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5000/events\");\n        const payload = await response.json();\n        dispatch({ type: GET_EVENTS, payload })\n\n      } catch (error) {\n        dispatch({ type: GET_EVENTS, payload: [] });\n        console.log(error.message);\n      }\n    }\n    fetchEvents();\n  }, []);\n\n  const deleteEvent = async (payload) => {\n    try {\n      dispatch({ type: DELETE_EVENT, payload });\n      const response = await fetch(`http://localhost:5000/events/${payload}`,\n        { method: \"DELETE\" }\n      )\n\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n\n  const addEvent = async (payload) => {\n    try {\n      dispatch({ type: ADD_EVENT, payload })\n      const response = await fetch(\"http://localhost:5000/events\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(payload)\n      })\n\n    } catch (error) {\n      console.error(error.message);\n    }\n  }\n\n  return (\n    <div className=\"container px-6\">\n      <div className=\"flex flex-row  justify-start items-center my-3 \">\n        <Button layout=\"outline\" className=\"mx-3\"\n          onClick={() => addEvent({ name, add, modify, time: new Date().toISOString(Date.now()) })}>\n          添加\n        </Button>\n\n        <span className=\"font-Inconsolata font-semibold text-purple-600 text-lg\">I've added</span>\n        <input\n          className=\"block w-1/4 mt-1 mx-4 text-sm font-Inconsolata dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n          onChange={e => setAdd(e.target.value || 0)}\n        />\n        <p className=\"px-3 text-purple-600 font-Inconsolata font-semibold text-lg\">and modified</p>\n        <input\n          className=\"block w-1/4 mt-1 text-sm mx-4 font-Inconsolata dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n          onChange={e => setModify(e.target.value)}\n        />\n        <p className=\"px-3 text-purple-600 font-Inconsolata font-semibold text-lg\">words.</p>\n      </div>\n      <TableContainer className=\"mb-8\">\n        <Table>\n          <TableHeader>\n            <tr>\n              <TableCell>User</TableCell>\n              <TableCell>Add</TableCell>\n              <TableCell>Modify</TableCell>\n              <TableCell>Date</TableCell>\n              <TableCell>Actions</TableCell>\n            </tr>\n          </TableHeader>\n          <TableBody>\n            {dataTable.map((event, i) => (\n              <TableRow key={i}>\n                <TableCell>\n                  <div className=\"flex items-center text-sm\">\n                    <div>\n                      <p className=\"font-semibold\">{event.name}</p>\n                    </div>\n                  </div>\n                </TableCell>\n                <TableCell>\n                  <Badge type=\"primary\">{event.add}</Badge>\n                </TableCell>\n                <TableCell>\n                  <Badge type=\"success\">{event.modify}</Badge>\n                </TableCell>\n                <TableCell>\n                  <span className=\"text-sm\">{event.time}</span>\n                </TableCell>\n                <TableCell>\n                  <div className=\"flex items-center space-x-4\">\n                    <Button onClick={() => deleteEvent(event.id)} layout=\"link\" size=\"icon\" aria-label=\"Delete\">\n                      <TrashIcon className=\"w-5 h-5\" aria-hidden=\"true\" hidden={event.name !== name} />\n                    </Button>\n                  </div>\n                </TableCell>\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n        <TableFooter>\n          <Pagination\n            totalResults={totalResults}\n            resultsPerPage={resultsPerPage}\n            onChange={onPageChangeTable}\n            label=\"Table navigation\"\n          />\n        </TableFooter>\n      </TableContainer>\n    </div>\n  )\n}\n\nexport default Tables\n"],"sourceRoot":""}