{"version":3,"sources":["components/Modals.js","pages/WordCard.js"],"names":["Modals","word","put","useState","isModalOpen","setIsModalOpen","newWord","Object","assign","closeModal","className","onClick","icon","faEdit","color","backdrop","isOpen","onClose","onChange","e","name","target","value","valid","placeholder","defaultValue","definition","rows","detail","layout","block","size","WordPages","min","setMin","first","setFirst","search","setSearch","Number","MAX_VALUE","max","setMax","user","setUser","isUpper","setIsUpper","setOpen","alpha","i","push","String","fromCharCode","words","useSelector","state","wordlist","sort","x","filter","toUpperCase","totalResults","length","dispatch","useDispatch","render","rerender","pageTable","setPageTable","bar","setBar","dataTable","setDataTable","update","a","updateWord","fetch","id","method","headers","body","JSON","stringify","console","log","message","deleteAWord","deleteWord","useEffect","startsWith","author","includes","slice","key","faAngleDown","faAngleUp","map","chr","index","hidden","resultsPerPage","p","label"],"mappings":"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","file":"static/js/14.969fc5ee.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button, Label, Input, HelperText, Textarea } from '@windmill/react-ui'\nimport { faEdit } from '@fortawesome/free-regular-svg-icons';\n\nfunction Modals({ word, put }) {\n  const [isModalOpen, setIsModalOpen] = useState(false)\n  let newWord = Object.assign({}, word);\n\n  function openModal() {\n    setIsModalOpen(true)\n  }\n\n  function closeModal() {\n    setIsModalOpen(false)\n  }\n\n  return (\n    <>\n      <div className=\"absolute bottom-0 p-3 right-0\">\n\n        <button className=\"font-bold\" onClick={openModal}><FontAwesomeIcon icon={faEdit} color=\"purple\" /></button>\n      </div>\n\n      <Modal backdrop='static' isOpen={isModalOpen} onClose={closeModal}>\n        <ModalHeader className=\"font-bold\">正在编辑...</ModalHeader>\n        <ModalBody>\n          <div className=\"px-4 py-3 mb-8 bg-cool-gray-100 rounded-lg shadow-md dark:bg-gray-800\">\n            <Label className=\"mt-4\">\n              <Input className=\"mt-1\" onChange={e => {\n                newWord.name = e.target.value;\n              }} valid={true} placeholder={word.name} defaultValue={word.name} />\n              <HelperText valid={true} className=\"font-bold p-2\">单词</HelperText>\n            </Label>\n\n            <Label className=\"mt-4\">\n              <Input className=\"mt-1\" onChange={e => {\n                newWord.definition = e.target.value;\n              }} valid={true} placeholder={word.name} defaultValue={word.definition} />\n              <HelperText valid={true} className=\"font-bold p-2\">中文</HelperText>\n            </Label>\n\n            <Label className=\"mt-4\">\n              <Textarea className=\"mt-1\" rows=\"6\" placeholder={word.name} defaultValue={word.detail}\n                onChange={e => {\n                  newWord.detail = e.target.value;\n                }} />\n\n            </Label>\n\n          </div>\n\n        </ModalBody>\n        <ModalFooter>\n          {/* I don't like this approach. Consider passing a prop to ModalFooter\n           * that if present, would duplicate the buttons in a way similar to this.\n           * Or, maybe find some way to pass something like size=\"large md:regular\"\n           * to Button\n           */}\n          <div className=\"hidden sm:block\">\n            <Button layout=\"outline\" onClick={closeModal}>\n              Cancel\n            </Button>\n          </div>\n          <div className=\"hidden sm:block\">\n            <Button onClick={() => {\n              put(newWord);\n              closeModal();\n            }\n            }>Put</Button>\n          </div>\n          <div className=\"block w-full sm:hidden\">\n            <Button block size=\"large\" layout=\"outline\" onClick={closeModal}>\n              Cancel\n            </Button>\n          </div>\n\n        </ModalFooter>\n      </Modal>\n    </>\n  )\n}\n\nexport default Modals\n","import React, { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { updateWord, deleteWord } from '../redux/actions/wordlist';\nimport { Card, CardBody } from '@windmill/react-ui';\nimport { Pagination, Label, Button } from '@windmill/react-ui'\nimport Modals from '../components/Modals';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faAngleDown, faAngleUp } from '@fortawesome/free-solid-svg-icons';\n\n\nexport default function WordPages() {\n\n    const [min, setMin] = useState(0);\n    const [first, setFirst] = useState(\"\");\n    const [search, setSearch] = useState(\"\");\n    const [max, setMax] = useState(Number.MAX_VALUE);\n    const [user, setUser] = useState(\"\");\n    const [isUpper, setIsUpper] = useState(false);\n    const [isOpen, setOpen] = useState(false);\n    const alpha = [];\n    for (let i = 0; i < 26; i++) {\n        alpha.push(String.fromCharCode(i + 97));\n    }\n\n    let words = useSelector(state => state.wordlist).sort(x => x.name)\n    if (isUpper) words = words.filter(word => word.name.toUpperCase() === word.name)\n\n    // pagination setup\n    const resultsPerPage = 20;\n    const totalResults = words.length;\n    const dispatch = useDispatch();\n    const [render, rerender] = useState(0);\n    // setup pages control for every table\n    const [pageTable, setPageTable] = useState(1)\n    const [bar, setBar] = useState(true);\n    // setup data for every table\n    const [dataTable, setDataTable] = useState([]);\n\n    const update = async (word) => {\n\n        try {\n            dispatch(updateWord(word));\n            const response = await fetch(`http://localhost:5000/words/${word.id}`,\n                {\n                    method: \"PUT\",\n                    headers: { \"Content-Type\": \"application/json\" },\n                    body: JSON.stringify(word)\n                });\n\n            rerender(render + 1);\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n\n    const deleteAWord = async (id) => {\n        try {\n            dispatch(deleteWord(id));\n            const response = await fetch(`http://localhost:5000/words/${id}`, {\n                method: 'DELETE'\n            });\n\n            rerender(render + 1);\n\n        } catch (error) {\n            console.log(error.message);\n        }\n    }\n    // pagination change control\n    function onPageChangeTable(p) {\n        setPageTable(p)\n    }\n\n    // on page change, load new sliced data\n    // here you would make another server request for new data\n    useEffect(() => {\n\n    })\n\n\n    useEffect(() => {\n        words = words.filter(word => word.name.toUpperCase().startsWith(first.toUpperCase()) && word.detail.length >= min && word.detail.length <= max);\n        if (user !== \"\") words = words.filter(word => word.author === user);\n        words = words.filter\n            (word => word.name.toUpperCase().includes((search).toUpperCase())\n                || word.definition.includes(search));\n        setDataTable(words.slice((pageTable - 1) * resultsPerPage, pageTable * resultsPerPage));\n\n    }\n        , [pageTable, render, first, isUpper])\n\n    return (\n        <div className=\"container mt-4 px-6\">\n            <div className=\" px-4 py-3 mb-4 bg-white rounded-lg shadow-md dark:bg-gray-800\">\n                <Label>\n                    <div className=\"relative flex flex-row\">\n                        <input\n                            className=\"block font-Noto w-3/4 pl-24 mt-1 text-sm dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                            placeholder=\"  type the keyword here\"\n                            onChange={e => setSearch(e.target.value || \"\")}\n                        />\n\n                        <Button key={alpha.length}\n                            size=\"lg\"\n                            className={`rounded-lg p-2  font-Noto font-semibold my-1  ml-4 mr-2 text-lg ${isUpper && \"text-green-100 bg-purple-600 \"}`}\n                            layout=\"outline\"\n                            onClick={() => setIsUpper(!isUpper)}>缩写</Button>\n                        <Button key={alpha.length + 1}\n                            size=\"lg\"\n                            className={`rounded-lg p-2 font-Noto font-semibold my-1 mx-2 text-lg ${isOpen && \"text-green-100 bg-purple-600 \"}`}\n                            layout=\"outline\"\n                            onClick={() => setOpen(!isOpen)}>解释部分</Button>\n\n                        <button\n                            onClick={() => rerender(render + 1)}\n                            className=\" font-Noto  font-lg absolute inset-y-0 mt-1 px-4 text-sm font-bold leading-5 text-white transition-colors duration-150 bg-purple-600 border border-transparent rounded-l-md active:bg-purple-600 hover:bg-purple-700 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray\">\n                            Search\n                        </button>\n\n                    </div>\n                    <div className=\"flex flex-row  justify-start items-center my-3 \">\n                        <p className=\"font-Noto font-semibold text-purple-600 text-lg\">解释部分字符</p>\n                        <input\n                            className=\"block w-1/4 mt-1 mx-4 text-sm font-Noto dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                            placeholder=\"minLength\"\n                            onChange={e => setMin(e.target.value || 0)}\n                        />\n                        <p className=\"px-3 text-purple-600 font-Noto font-semibold text-lg\">To</p>\n                        <input\n                            className=\"block w-1/4 mt-1 text-sm mx-4 font-Noto dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                            placeholder=\"maxLength\"\n                            onChange={e => setMax(e.target.value || Number.MAX_VALUE)}\n                        />\n                        <div className=\"font-semibold text-lg font-Noto text-purple-600 flex flex-row justify-center align-middle  items-center my-3 \">\n\n                            @User<input\n                                className=\"block w-full mt-1 mx-4 text-sm font-Noto dark:text-gray-300 dark:border-gray-600 dark:bg-gray-700 focus:border-purple-400 focus:outline-none focus:shadow-outline-purple dark:focus:shadow-outline-gray form-input\"\n                                placeholder=\"作者\"\n                                onChange={e => setUser(e.target.value)}\n                            />\n                        </div>\n                        <FontAwesomeIcon icon={faAngleDown} size=\"lg\" className={`${!bar && 'hidden'}`} onClick={() => setBar(!bar)} />\n                        <FontAwesomeIcon icon={faAngleUp} size=\"lg\" className={`${bar && 'hidden'}`} onClick={() => setBar(!bar)} />\n\n                    </div>\n                    <div className={`mt-2 grid grid-cols-12 ${bar && 'hidden'}`}>\n                        {alpha.map((chr, index) => (\n                            <Button key={index}\n                                size=\"xm\"\n                                className={`rounded-lg font-Noto px-1 font-semibold my-1 mx-2 text-sm ${first === chr.toUpperCase() && \"text-green-100 bg-purple-600 \"}`}\n                                layout=\"outline\"\n                                onClick={() => setFirst(chr.toUpperCase())}>{chr.toUpperCase()}</Button>\n                        ))}\n                        <Button key={alpha.length}\n                            size=\"xm\"\n                            className={`rounded-lg font-Noto font-semibold my-1 mx-2 text-sm ${first === \"\" && \"text-green-100 bg-purple-600 \"}`}\n                            layout=\"outline\"\n                            onClick={() => setFirst(\"\")}>All</Button>\n\n                    </div>\n                </Label>\n\n\n            </div>\n            <div className=\"container w-full  p-5\">\n                {\n                    dataTable.map((word, index) => (\n                        <Card key={index} className=\"mb-4 relative mr-4\">\n                            <CardBody>\n                                <p className=\"mb-4 font-bold text-gray-600 dark:text-gray-300\">{word.name}</p>\n                                <p className=\"text-gray-600 dark:text-gray-400 font-semibold mb-3\">\n                                    <span className=\"mr-2 font-semibold bg-purple-600 rounded text-white p-1\">中文释义</span>\n                                    {word.definition}\n                                </p>\n                                <p hidden={!isOpen} className=\"text-gray-600 dark:text-gray-400 pb-8 leading-7\">\n                                    {word.detail}\n                                </p>\n                                <div className=\"absolute top-0 right-0\">\n                                    <button className=\"bg-purple-600 p-2 text-white rounded text-sm font-concert\" onClick={() => deleteAWord(word.id)}>Delete</button>\n                                </div>\n                                <Modals word={word} put={update} />\n                            </CardBody>\n                        </Card>\n                    ))\n                }\n\n                <Pagination totalResults={totalResults}\n                    resultsPerPage={resultsPerPage}\n                    onChange={onPageChangeTable}\n                    label=\"Table navigation\"\n                />\n            </div>\n        </div>\n    )\n}\n"],"sourceRoot":""}